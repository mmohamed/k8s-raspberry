---
apiVersion: v1
kind: Namespace
metadata:
  name: nfs-storage
  labels:
    name: nfs-storage

---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: nfs-client-provisioner
  namespace: nfs-storage

---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: nfs-client-provisioner-runner
rules:
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "create", "delete"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "update", "patch"]
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["get", "list", "watch", "create", "update", "patch"]  

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: run-nfs-client-provisioner
subjects:
  - kind: ServiceAccount
    name: nfs-client-provisioner
    namespace: nfs-storage
roleRef:
  kind: ClusterRole
  name: nfs-client-provisioner-runner
  apiGroup: rbac.authorization.k8s.io

---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: leader-locking-nfs-client-provisioner
  namespace: nfs-storage
rules:
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["get", "list", "watch", "create", "update", "patch"]

---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: leader-locking-nfs-client-provisioner
  namespace: nfs-storage
subjects:
  - kind: ServiceAccount
    name: nfs-client-provisioner
    # replace with namespace where provisioner is deployed
    namespace: nfs-storage
roleRef:
  kind: Role
  name: leader-locking-nfs-client-provisioner
  apiGroup: rbac.authorization.k8s.io

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: nfs-client-provisioner
  namespace: nfs-storage
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nfs-client-provisioner
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: nfs-client-provisioner
    spec:
      serviceAccount: nfs-client-provisioner
      containers:
        - name: nfs-client-provisioner
          image: quay.io/external_storage/nfs-client-provisioner-arm:latest
          volumeMounts:
            - name: nfs-client-root
              mountPath: /persistentvolumes
          env:
            - name: PROVISIONER_NAME
              value: nfs-provisioner/nfs-ssd
            - name: NFS_SERVER
              value: 192.168.1.17
            - name: NFS_PATH
              value: /data/kubernetes-storage
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - nfs-client-provisioner
              topologyKey: kubernetes.io/hostname
      volumes:
        - name: nfs-client-root
          nfs:
            server: 192.168.1.17
            path: /data/kubernetes-storage      

---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: nfs-ssd
  annotations:
    storageclass.kubernetes.io/is-default-class: "true"
provisioner: nfs-provisioner/nfs-ssd
parameters:
  archiveOnDelete: "true"

# Run all on the Master Node
# sudo apt-get install nfs-kernel-server nfs-common
# sudo systemctl enable nfs-kernel-server
# sudo systemctl start nfs-kernel-server
# sudo cat >> /etc/exports <<EOF
# /data/kubernetes-storage/ north(rw,sync,no_subtree_check,no_root_squash)
# /data/kubernetes-storage/ south(rw,sync,no_subtree_check,no_root_squash)
# EOF
# sudo exportfs -a  