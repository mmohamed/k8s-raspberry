---
apiVersion: v1
kind: Namespace
metadata:
   name: monitoring

---   
apiVersion: v1
kind: Secret
metadata:
  name: monitoring-tls
  namespace: monitoring
data:
  tls.crt: {{crt}}
  tls.key: {{key}}
type: kubernetes.io/tls

---   
apiVersion: v1
kind: Secret
metadata:
  name: monitoring-token
  namespace: monitoring
type: Opaque  
data:
  security.token: {{encodedtoken}}

---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx
  name: monitoring-ingress
  namespace: monitoring
  labels:
    app: api
spec:
  rules:
    - host: {{host}}
      http:
        paths:
          - backend:
              serviceName: monitoring-service
              servicePort: http
            path: /
  tls:
    - hosts:
      - {{host}}
      secretName: monitoring-tls

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api
  namespace: monitoring
  labels:
    app: api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api
  template:
    metadata:
      labels:
        app: api
        commit: '{{commit}}'
    spec:
      serviceAccountName: api-access
      containers:
        - name: api
          image: medinvention/k8s-monitoring-api:arm
          imagePullPolicy: Always
          env:
            - name: COLLECTOR_TOKEN
              valueFrom:
                secretKeyRef:
                  name: monitoring-token
                  key: security.token
            - name: FAN_SERVER_URL
              value: 'http://192.168.1.85:5000'
            - name: FAN_MAXTEMP
              value: '60'
          ports:
            - containerPort: 8080
          readinessProbe:
            httpGet:
              path: /k8s/actuator/health
              port: 8080
            initialDelaySeconds: 60
            timeoutSeconds: 2
            periodSeconds: 3
            failureThreshold: 1
          livenessProbe:
            httpGet:
              path: /k8s/actuator/health
              port: 8080
            initialDelaySeconds: 300
            timeoutSeconds: 5
            periodSeconds: 60
            failureThreshold: 1

---
apiVersion: v1
kind: Service
metadata:
  name: monitoring-service
  namespace: monitoring
spec:
  ports:
  - name: http
    port: 80
    targetPort: 8080
  selector:
    app: api

---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
  name: api-access
  namespace: monitoring

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: api-access
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: api-access
    namespace: monitoring

---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: monitoring-agent
  namespace: monitoring
  labels:
    k8s-app: monitoring-agent
spec:
  selector:
    matchLabels:
      name: monitoring-agent
  template:
    metadata:
      labels:
        name: monitoring-agent
        commit: '{{commit}}'
    spec:
      tolerations:
      # this toleration is to have the daemonset runnable on master nodes
      # remove it if your masters can't run pods
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
      containers:
      - name: monitoring-agent
        image: busybox
        env:
          - name: NODE
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: SERVER
            value: http://monitoring-service.monitoring.svc.cluster.local/k8s/collect/{{token}}/temperature
        command: [ "sh", "-c"]
        args:
        - while true; do
            TEMP=$(cat /sys/class/thermal/thermal_zone0/temp);
            URL="$SERVER?node=$NODE&value=$TEMP";
            wget -qO- $URL;
            sleep 5;
          done;
        imagePullPolicy: IfNotPresent